var Game = function () {
    this.board = [];
    this.placedPiecesCount = 0;
};

let indexBasedOnCoords = function(x,y) {
    let adjX = x - 1;
    let adjY = y - 1;
    let index = adjX + (adjY * 3);
    return index;
}

let playerBasedOnPiecesPlaced = function(piecesPlaced) {
    return (piecesPlaced % 2 === 0) ? 'O' : 'X';
}

let getBackwardDiagonalLine = function(board) {
    return [
                board[indexBasedOnCoords(1,1)],
                board[indexBasedOnCoords(2,2)],
                board[indexBasedOnCoords(3,3)]
           ].join('');
}

let getHorizontalLine = function(y, board) {
    let startIndex = indexBasedOnCoords(1,y);
    let endIndex = indexBasedOnCoords(3,y);
    let horzLine = board.slice(startIndex,endIndex+1).join('');
    return horzLine;
}

let getVerticalLine = function(x, board) {
    return [
                board[indexBasedOnCoords(x,1)],
                board[indexBasedOnCoords(x,2)],
                board[indexBasedOnCoords(x,3)]
           ].join('');
}

Game.prototype.placedPieces = function() {
    let placed = this.board.reduce((total, element)  => {
        if (element == undefined) return total;
        return total + 1;
    }, 0);
    return placed;
}

Game.prototype.placePieceTypeAt = function(piece,x,y) {
    let index = indexBasedOnCoords(x,y);
    if (this.board[index] !== undefined) {
        throw new TypeError('Piece already placed there!');
    }

    this.board[index] = piece;
}

Game.prototype.placePiece = function(x,y) {
    let piece = playerBasedOnPiecesPlaced(this.placedPieces());
    this.placePieceTypeAt(piece,x,y);
}

Game.prototype.hasWinnerOnVertical = function() {
    let winner = false;
    [1, 2, 3].map(x => {
        let vertLine = getVerticalLine(x, this.board);
        if (vertLine === 'OOO') winner = 'O';
        if (vertLine === 'XXX') winner = 'X';
        if (winner) return;
    });
    return winner;
}

Game.prototype.hasWinnerOnHorizontal = function() {
    let winner = false;
    [1, 2, 3].map(y => {
        let horzLine = getHorizontalLine(y, this.board);
        if (horzLine === 'OOO') winner = 'O';
        if (horzLine === 'XXX') winner = 'X';
        if (winner) return;
    });
    return winner;
}

Game.prototype.hasWinner = function() {  
    return this.hasWinnerOnHorizontal() || this.hasWinnerOnVertical();
}

Game.prototype.currentPlayer = function() {
    return playerBasedOnPiecesPlaced(this.placedPieces());
}

Game.prototype.nextPlayer = function() {
    return playerBasedOnPiecesPlaced(this.placedPiecesCount+1);
}

Game.prototype.pieceAt = function(x,y) {
    let index = indexBasedOnCoords(x,y);
    return this.board[index];
}

module.exports = Game;
